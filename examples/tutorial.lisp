(in-package :clutter-examples)

;;; Implement tutorial from
;;; http://www.openismus.com/documents/clutter_tutorial/0.9/docs/tutorial/html/index.html



(defun chapter-4-on-stage-button-press (stage event)
  (declare (ignore stage))
  (destructuring-bind (x y) (event-get-coords event)
    (format t "Stage clicked at ~a ~a~&" x y))
  (values t))

(defun chapter-4 ()
  (with-color (stage-color 0 0 0 255)
    (init-clutter)
    (let ((stage (stage-get-default)))
      ;; in case other examples were run before
      (group-remove-all stage)
      (actor-set-size stage 200.0 200.0)
      (stage-set-color stage stage-color)
      (connect-event-handler stage "button-press-event" #'chapter-4-on-stage-button-press)
      (main-with-cleanup stage))))

(defun chapter-5-1 ()
  (with-colors ((stage-color 0 0 0)
                (actor-color #xff #xff #xff #x99))
    (init-clutter)
    (let ((stage (stage-get-default)))
      (group-remove-all stage)
      (actor-set-size stage 200.0 200.0)
      (stage-set-color stage stage-color)
      (let ((rect (rectangle-new-with-color actor-color))
            (label (text-new-full "Sans 12" "Some Text" actor-color)))
        (actor-set-size rect 100.0 100.0)
        (actor-set-position rect 20.0 20.0)
        (container-add-actor stage rect)
        (actor-show rect)
        (actor-set-size label 500.0 500.0)
        (actor-set-position label 20.0 150.0)
        (container-add-actor stage label)
        (actor-show label))
      (main-with-cleanup stage))))

(defun chapter-5-2 ()
  (with-colors ((stage-color 0 0 0)
                (actor-color #xff #xff #xff #x99))
    (init-clutter)
    (let ((stage (stage-get-default)))
      (group-remove-all stage)
      (actor-set-size stage 200.0 200.0)
      (stage-set-color stage stage-color)
      (let ((rect (rectangle-new-with-color actor-color))
            (label (text-new-full "Sans 12" "Some Text" actor-color)))
        (actor-set-size rect 100.0 100.0)
        (actor-set-position rect 20.0 20.0)
        (container-add-actor stage rect)
        (actor-show rect)
        (actor-set-rotation rect :x-axis -20d0 0.0 0.0 0.0)
        (actor-set-size label 500.0 500.0)
        (actor-set-position label 20.0 150.0)
        (container-add-actor stage label)
        (actor-show label)
        (actor-set-scale label 3d0 1d0)
        (actor-move-by label 10.0 -10.0)
        (actor-set-depth label -20.0))
      (main-with-cleanup stage))))

(defun chapter-5-3 ()
  (with-colors ((stage-color 0 0 0)
                (actor-color #xff #xff #xff #x99))
    (init-clutter)
    (let ((stage (stage-get-default)))
      (group-remove-all stage)
      (actor-set-size stage 200.0 200.0)
      (stage-set-color stage stage-color)
      (let ((group (group-new)))
        (actor-set-position group 40.0 40.0)
        (container-add-actor stage group)
        (actor-show group)
        (let ((rect (rectangle-new-with-color actor-color))
              (label (text-new-full "Sans 9" "Some Text" actor-color)))
          (actor-set-size rect 50.0 50.0)
          (actor-set-position rect 0.0 0.0)
          (container-add-actor group rect)
          (actor-show rect)
          (actor-set-size label 500.0 500.0)
          (actor-set-position label 0.0 60.0)
          (container-add-actor group label)
          (actor-show label))
        (actor-set-scale group 3d0 1d0)
        (actor-set-rotation group :z-axis 10d0 0.0 0.0 0.0))
      (main-with-cleanup stage))))

(defun chapter-5-4-on-stage-button-press (stage event)
  (destructuring-bind (x y) (event-get-coords event)
    (format t "Clicked stage at (~a, ~a)~&" x y)
    (let ((maybe-rec (stage-get-actor-at-position stage :all (truncate x) (truncate y))))
      (cond ((null maybe-rec)
             nil)
            ((eql (g-type-from-name "ClutterRectangle") (g-type-from-instance maybe-rec))
             (format t "A rectangle is at that position.~&")
             t)
            (t t)))))

(defun chapter-5-4-on-rect-button-press (rect event)
  (declare (ignore rect))
  (destructuring-bind (x y) (event-get-coords event)
    (format t "Clicked rectangle at (~a, ~a)~&" x y)
    nil))

(defun chapter-5-4-on-rect-button-release (rect event)
  (declare (ignore rect))
  (destructuring-bind (x y) (event-get-coords event)
    (format t "Click-release rectangle at (~a, ~a)~&" x y)
    t))

(defun chapter-5-4-on-rect-motion (rect event)
  (declare (ignore rect event))
  (format t "Motion in rectangle.~&")
  t)

(defun chapter-5-4-on-rect-enter (rect event)
  (declare (ignore rect event))
  (format t "Entered rectangle.~&")
  t)

(defun chapter-5-4-on-rect-leave (rect event)
  (declare (ignore rect event))
  (format t "Left rectangle.~&")
  t)

(defun chapter-5-4 ()
  (with-colors ((stage-color 0 0 0)
                (actor-color #xff #xff #xff #x99))
    (init-clutter)
    (let ((stage (stage-get-default)))
      (group-remove-all stage)
      (actor-set-size stage 200.0 200.0)
      (stage-set-color stage stage-color)
      (connect-event-handler stage "button-press-event" #'chapter-5-4-on-stage-button-press)
      (let ((rect (rectangle-new-with-color actor-color)))
        (actor-set-size rect 100.0 100.0)
        (actor-set-position rect 50.0 50.0)
        (actor-show rect)
        (container-add-actor stage rect)
        (actor-set-reactive rect +true+)
        (connect-event-handler rect "button-press-event" #'chapter-5-4-on-rect-button-press)
        (connect-event-handler rect "button-release-event" #'chapter-5-4-on-rect-button-release)
        (connect-event-handler rect "motion-event" #'chapter-5-4-on-rect-motion)
        (connect-event-handler rect "enter-event" #'chapter-5-4-on-rect-enter)
        (connect-event-handler rect "leave-event" #'chapter-5-4-on-rect-leave))
      (main-with-cleanup stage))))

(defun make-chapter-6-1-on-new-frame (rect color-object color1 color2)
  #'(lambda (timeline msec)
      (declare (ignore msec))
      (let ((progress (timeline-get-progress timeline)))
        (let ((sin-progress (expt (sin (* pi progress)) 2)))
         (let ((angle (* progress 720d0))
               (color (mapcar #'truncate
                              (mapcar #'+
                                      (mapcar (curry #'* sin-progress) color1)
                                      (mapcar (curry #'* (- 1 sin-progress)) color2)))))
           (actor-set-rotation rect :x-axis angle 0.0 0.0 0.0)
           (apply #'set-color color-object color)
           (rectangle-set-color rect color-object))))))

(defun chapter-6-1 ()
  (with-new-pool :main
    (with-colors ((stage-color 0 0 0)
                  (rect-color #xff #xff #xff #x99))
      (init-clutter)
      (let ((stage (stage-get-default))
            (timeline (pool (timeline-new 6000))))
        (group-remove-all stage)
        (actor-set-size stage 200.0 200.0)
        (stage-set-color stage stage-color)
        (let ((rect (rectangle-new-with-color rect-color)))
          (actor-set-size rect 70.0 70.0)
          (actor-set-position rect 50.0 100.0)
          (container-add-actor stage rect)
          (actor-show rect)
          (timeline-add-marker-at-time timeline "clutter-tutorial" 3000)
          (connect-new-frame-handler timeline (make-chapter-6-1-on-new-frame
                                               rect
                                               rect-color
                                               '(0 0 255 255)
                                               '(0 255 0 255)))
          (connect-marker-reached-handler timeline
                                          #'(lambda (timeline marker-name msec)
                                              (declare (ignore timeline))
                                              (format t "~&Reached marker ~a at time ~a msec.~&" marker-name msec)))
          (timeline-set-loop timeline +true+)
          (timeline-start timeline))
        (main-with-cleanup stage)))))

(defun make-chapter-6-2-on-new-frame-move (rect)
  #'(lambda (timeline msec)
      (declare (ignore msec))
      (let ((progress (timeline-get-progress timeline)))
        (actor-set-x rect (coerce (round (+ 50 (* 50.0 (expt (sin (* 2 pi progress)) 2))))
                                   'single-float)))))

(defun chapter-6-2 ()
  (with-new-pool :main
    (with-colors ((stage-color 0 0 0)
                  (rect-color #xff #xff #xff #x99))
      (init-clutter)
      (let ((stage (stage-get-default))
            (score (pool (score-new)))
            (timeline1 (pool (timeline-new 6000)))
            (timeline2 (pool (timeline-new 6000))))
        (group-remove-all stage)
        (actor-set-size stage 200.0 200.0)
        (stage-set-color stage stage-color)
        (let ((rect (rectangle-new-with-color rect-color)))
          (actor-set-size rect 70.0 70.0)
          (actor-set-position rect 50.0 100.0)
          (container-add-actor stage rect)
          (actor-show rect)
          (connect-new-frame-handler timeline1 (make-chapter-6-1-on-new-frame rect
                                                                              rect-color
                                                                              '(0 0 255 255)
                                                                              '(0 255 0 255)))
          (connect-new-frame-handler timeline2
                                     (make-chapter-6-2-on-new-frame-move rect))
          (score-append score nil timeline1)
          (score-append score timeline1 timeline2)
          (score-set-loop score +true+)
          (score-start score))
        (main-with-cleanup stage)))))

(defun chapter-7 ()
  (with-new-pool :main
    (with-colors ((stage-color 0 0 0)
                  (rect-color #xff #xff #xff #x99))
      (init-clutter)
      (let ((stage (stage-get-default)))
        (group-remove-all stage)
        (actor-set-size stage 200.0 200.0)
        (stage-set-color stage stage-color)
        (let ((rect (rectangle-new-with-color rect-color))
              (timeline (pool (timeline-new 5000))))
          (actor-set-size rect 40.0 40.0)
          (actor-set-position rect 10.0 10.0)
          (container-add-actor stage rect)
          (actor-show rect)
          (timeline-set-loop timeline +true+)
          (let ((alpha (alpha-new-with-function timeline
                                                #'(lambda (alpha)
                                                    (timeline-get-progress
                                                     (alpha-get-timeline alpha))))))
            (animate-actor-with-alpha rect alpha "x" 150.0 "y" 150.0 "opacity" 0)
            (main-with-cleanup stage)))))))

(defun chapter-8 ()
  (with-new-pool :main
    (with-colors ((stage-color 0 0 0)
                  (rect-color #xff #xff #xff #x99))
      (init-clutter)
      (let ((stage (stage-get-default)))
        (group-remove-all stage)
        (actor-set-size stage 200.0 200.0)
        (stage-set-color stage stage-color)
        (let ((rect (rectangle-new-with-color rect-color))
              (timeline (pool (timeline-new 5000))))
          (actor-set-size rect 40.0 40.0)
          (actor-set-position rect 10.0 10.0)
          (container-add-actor stage rect)
          (actor-show rect)
          (timeline-set-loop timeline +true+)
          (timeline-start timeline)
          (let ((alpha (alpha-new-with-function timeline
                                                #'(lambda (alpha)
                                                    (timeline-get-progress
                                                     (alpha-get-timeline alpha))))))
            (let ((path-behaviour (pool (make-behaviour-path-with-knots alpha 10 10 150 150))))
              (behaviour-apply path-behaviour rect)
              (main-with-cleanup stage))))))))

(defun chapter-9 ()
  (with-colors ((stage-color 0 0 0)
                (text-color #xff #xff #xcc #xff)
                (selection-color #x00 #x50 #xff #x80))
    (init-clutter)
    (let ((stage (stage-get-default)))
      (group-remove-all stage)
      (actor-set-size stage 800.0 200.0)
      (stage-set-color stage stage-color)
      (let ((text (text-new)))
        (text-set-color text text-color)
        (text-set-text text "Non-editable text: Wizard imps and sweat sock pimps, interstellar mongrel nymphs.")
        (text-set-font-name text "Sans 12")
        (text-set-editable text +false+)
        (text-set-line-wrap text +false+)
        (let ((preferred-height (nth-value 1 (actor-get-preferred-height text 750.0))))
          (actor-set-size text 750.0 preferred-height))
        (actor-set-position text 5.0 5.0)
        (container-add-actor stage text)
        (actor-show text))
      (let ((text (text-new)))
        (text-set-color text text-color)
        (text-set-text text
                        (concatenate 'string
                                     "Editable text: And as I sat there brooding on the old, unknown world, I thought of "
                                     "Gatsby's wonder when he first picked out the green light at the end of "
                                     "Daisy's dock. He had come a long way to this blue lawn and his dream "
                                     "must have seemed so close that he could hardly fail to grasp it. He did "
                                     "not know that it was already behind him, somewhere back in that vast "
                                     "obscurity beyond the city, where the dark fields of the republic rolled "
                                     "on under the night."))
        (text-set-font-name text "Sans 12")
        (text-set-editable text +true+)
        (text-set-line-wrap text +true+)
        (actor-set-reactive text +true+)
        (text-set-selection-color text selection-color)
        (let ((preferred-height (nth-value 1 (actor-get-preferred-height text 750.0))))
          (actor-set-size text 750.0 preferred-height))
        (actor-set-position text 5.0 50.0)
        (container-add-actor stage text)
        (actor-show text)
        (stage-set-key-focus stage text))
      (main-with-cleanup stage))))
