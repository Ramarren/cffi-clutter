(in-package :cffi-clutter)

;;; Implement tutorial from
;;; http://www.openismus.com/documents/clutter_tutorial/0.9/docs/tutorial/html/index.html



(defun chapter-4-on-stage-button-press (stage event)
  (declare (ignore stage))
  (destructuring-bind (x y) (event-get-coords event)
    (format t "Stage clicked at ~a ~a~&" x y))
  (values t))

(defcallback quit-main-loop-when-idle gboolean
    ((data :pointer))
  (declare (ignore data))
  (%main-quit)
  +false+)

(defun chapter-4 ()
  (with-color (stage-color 0 0 0 255)
    (init-clutter)
    (let ((stage (%stage-get-default)))
      ;; in case other examples were run before
      (%group-remove-all stage)
      (%actor-set-size stage 200.0 200.0)
      (%stage-set-color stage stage-color)
      (%actor-show stage)
      (connect-signal stage "button-press-event" #'chapter-4-on-stage-button-press)
      (%main)
      ;; when I click window close button the loops stops, but window doesn't close
      ;; have to run main loop for a bit so it is hidden
      (%threads-add-idle (callback quit-main-loop-when-idle) (null-pointer))
      (disconnect-lisp-signals stage)
      (%actor-hide stage)
      (%main))))

(defun chapter-5-1 ()
  (with-colors ((stage-color 0 0 0)
                (actor-color #xff #xff #xff #x99))
    (init-clutter)
    (let ((stage (%stage-get-default)))
      (%group-remove-all stage)
      (%actor-set-size stage 200.0 200.0)
      (%stage-set-color stage stage-color)
      (let ((rect (%rectangle-new-with-color actor-color))
            (label (%text-new-full "Sans 12" "Some Text" actor-color)))
        (%actor-set-size rect 100.0 100.0)
        (%actor-set-position rect 20.0 20.0)
        (%container-add-actor stage rect)
        (%actor-show rect)
        (%actor-set-size label 500.0 500.0)
        (%actor-set-position label 20.0 150.0)
        (%container-add-actor stage label)
        (%actor-show label))
      (%actor-show stage)
      (%main)
      (%threads-add-idle (callback quit-main-loop-when-idle) (null-pointer))
      (%group-remove-all stage)
      (%actor-hide stage)
      (%main))))

(defun chapter-5-2 ()
  (with-colors ((stage-color 0 0 0)
                (actor-color #xff #xff #xff #x99))
    (init-clutter)
    (let ((stage (%stage-get-default)))
      (%group-remove-all stage)
      (%actor-set-size stage 200.0 200.0)
      (%stage-set-color stage stage-color)
      (let ((rect (%rectangle-new-with-color actor-color))
            (label (%text-new-full "Sans 12" "Some Text" actor-color)))
        (%actor-set-size rect 100.0 100.0)
        (%actor-set-position rect 20.0 20.0)
        (%container-add-actor stage rect)
        (%actor-show rect)
        (%actor-set-rotation rect :x-axis -20d0 0.0 0.0 0.0)
        (%actor-set-size label 500.0 500.0)
        (%actor-set-position label 20.0 150.0)
        (%container-add-actor stage label)
        (%actor-show label)
        (%actor-set-scale label 3d0 1d0)
        (%actor-move-by label 10.0 -10.0)
        (%actor-set-depth label -20.0))
      (%actor-show stage)
      (%main)
      (%threads-add-idle (callback quit-main-loop-when-idle) (null-pointer))
      (%group-remove-all stage)
      (%actor-hide stage)
      (%main))))

(defun chapter-5-3 ()
  (with-colors ((stage-color 0 0 0)
                (actor-color #xff #xff #xff #x99))
    (init-clutter)
    (let ((stage (%stage-get-default)))
      (%group-remove-all stage)
      (%actor-set-size stage 200.0 200.0)
      (%stage-set-color stage stage-color)
      (let ((group (%group-new)))
        (%actor-set-position group 40.0 40.0)
        (%container-add-actor stage group)
        (%actor-show group)
        (let ((rect (%rectangle-new-with-color actor-color))
              (label (%text-new-full "Sans 9" "Some Text" actor-color)))
          (%actor-set-size rect 50.0 50.0)
          (%actor-set-position rect 0.0 0.0)
          (%container-add-actor group rect)
          (%actor-show rect)
          (%actor-set-size label 500.0 500.0)
          (%actor-set-position label 0.0 60.0)
          (%container-add-actor group label)
          (%actor-show label))
        (%actor-set-scale group 3d0 1d0)
        (%actor-set-rotation group :z-axis 10d0 0.0 0.0 0.0))
      (%actor-show stage)
      (%main)
      (%threads-add-idle (callback quit-main-loop-when-idle) (null-pointer))
      (%group-remove-all stage)
      (%actor-hide stage)
      (%main))))

(defun chapter-5-4-on-stage-button-press (stage event)
  (destructuring-bind (x y) (event-get-coords event)
    (format t "Clicked stage at (~a, ~a)~&" x y)
    (let ((maybe-rec (%stage-get-actor-at-pos stage :all (truncate x) (truncate y))))
      (cond ((null-pointer-p maybe-rec)
             nil)
            ((eql (%g-type-from-name "ClutterRectangle") (g-type-from-instance maybe-rec))
             (format t "A rectangle is at that position.~&")
             t)
            (t t)))))

(defun chapter-5-4-on-rect-button-press (rect event)
  (declare (ignore rect))
  (destructuring-bind (x y) (event-get-coords event)
    (format t "Clicked rectangle at (~a, ~a)~&" x y)
    nil))

(defun chapter-5-4-on-rect-button-release (rect event)
  (declare (ignore rect))
  (destructuring-bind (x y) (event-get-coords event)
    (format t "Click-release rectangle at (~a, ~a)~&" x y)
    t))

(defun chapter-5-4-on-rect-motion (rect event)
  (declare (ignore rect event))
  (format t "Motion in rectangle.~&")
  t)

(defun chapter-5-4-on-rect-enter (rect event)
  (declare (ignore rect event))
  (format t "Entered rectangle.~&")
  t)

(defun chapter-5-4-on-rect-leave (rect event)
  (declare (ignore rect event))
  (format t "Left rectangle.~&")
  t)

(defun chapter-5-4 ()
  (with-colors ((stage-color 0 0 0)
                (actor-color #xff #xff #xff #x99))
    (init-clutter)
    (let ((stage (%stage-get-default)))
      (%group-remove-all stage)
      (%actor-set-size stage 200.0 200.0)
      (%stage-set-color stage stage-color)
      (connect-signal stage "button-press-event" #'chapter-5-4-on-stage-button-press)
      (let ((rect (%rectangle-new-with-color actor-color)))
        (%actor-set-size rect 100.0 100.0)
        (%actor-set-position rect 50.0 50.0)
        (%actor-show rect)
        (%container-add-actor stage rect)
        (%actor-set-reactive rect +true+)
        (connect-signal rect "button-press-event" #'chapter-5-4-on-rect-button-press)
        (connect-signal rect "button-release-event" #'chapter-5-4-on-rect-button-release)
        (connect-signal rect "motion-event" #'chapter-5-4-on-rect-motion)
        (connect-signal rect "enter-event" #'chapter-5-4-on-rect-enter)
        (connect-signal rect "leave-event" #'chapter-5-4-on-rect-leave))
      (%actor-show stage)
      (%main)
      (%threads-add-idle (callback quit-main-loop-when-idle) (null-pointer))
      (%group-remove-all stage)
      (disconnect-lisp-signals stage)
      (%actor-hide stage)
      (%main))))
